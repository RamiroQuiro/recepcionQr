---
const { uidCredencial, estado } = Astro.props;
---

<button
  id={`btnArchivar${uidCredencial}`}
  class="inline-flex items-center flex-shrink z-20 px-2.5 py-0.5 text-xs bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium rounded-l-md"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="h-5 w-5 mr-2"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"
    ></path>
  </svg>

  {estado ? "Archivar" : "Desarchivar"}
</button>

<script define:vars={{ uidCredencial, estado }} is:inline>

  const btnActualizar = document.getElementById(`btnArchivar${uidCredencial}`);

  async function actualizar(uidCredencials, estado) {
    try {
        const response = await fetch(`http://localhost:4321/api/credencial/${uidCredencials}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                estado: estado,
            }),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        if (data.status == 200) {
            // Aquí podrías actualizar tus datos en lugar de recargar toda la página
            
        }
    } catch (error) {
        console.error('Error:', error);
    }
}

  // Luego puedes llamar a la función con el uid que deseas eliminar

  btnActualizar.addEventListener("click", () => {
    actualizar(uidCredencial,estado);
  });
</script>
