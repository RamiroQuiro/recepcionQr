---
import BotonBackHistory from "../../components/BotonBackHistory.astro";
import MainDasboard from "../../components/MainDasboard.astro";
import Layout from "../../layouts/Layout.astro";
import Formulario from './components/Formulario.astro'
import ContenedorFormulario from "../../components/ContenedorFormualrio.astro";
const { uidCredencial } = Astro.params;
const fetichingCredencial = await fetch(
  `http://localhost:4321/api/credencial/${uidCredencial}`
);
const fetichingEventos = await fetch(`http://localhost:4321/api/eventos`);
const fetichingVideos = await fetch(`http://localhost:4321/api/listarvideos`);
const data = await fetichingCredencial.json();
const dataEventos = await fetichingEventos.json();
const dataVideos = await fetichingVideos.json();
const credencial = await data?.credencial;
const videos = await dataVideos?.files;
const eventos = await dataEventos?.eventos;
---

<Layout title={`Credencial ${credencial.nombreApellido}`}>
  <MainDasboard>
    <ContenedorFormulario>
      <BotonBackHistory
        clase="absolute top-5"
        href="http://localhost:4321/credenciales"
      />
      <div class="text-center">
        <h2 class="mt-5 text-lg font-bold text-gray-700">Carga Credencial</h2>
      </div>
   <Formulario credencial={credencial} eventos={eventos} videos={videos}/>
    </ContenedorFormulario>
  </MainDasboard>
</Layout>

<script define:vars={{ videos, credencial }}>
  const isEdit = false;

  // Obtención de los elementos del DOM
  const selectorEvento = document.getElementById("eventos");
  const selectorVideo = document.getElementById("idVideos");

  // Inicialización de la variable videosDelEvento
  let videosDelEvento = [];

  if (!isEdit) {
    selectorEvento.value = credencial.evento;
    selectorVideo.value = videos
      ?.filter((evento) => evento.uid == credencial.evento)[0]
      ?.videos?.filter((video) => video.id == credencial.video)[0]?.id;
  }
  // Función para filtrar los videos basado en el evento seleccionado
  const selectorVideos = () => {
    if (!credencial) {
      return;
    }

    videosDelEvento = videos.filter(
      (video) => video.uid === selectorEvento.value
    );

    // Limpia las opciones existentes
    selectorVideo.innerHTML = "";
    // Añade las nuevas opciones al selector de videos
    videosDelEvento[0]?.videos?.forEach((video) => {
      const option = document.createElement("option");
      option.value = video.id;
      option.textContent = video.name;
      selectorVideo.appendChild(option);
    });
  };

  // Añade el evento change al selector de eventos
  selectorEvento.addEventListener("change", selectorVideos);
</script>
