---
import LayoutLector from "../../../layouts/LayoutLector.astro";
import MainDashboard from "../../../components/MainDasboard.astro";
import Listado from "./componentes/Listado.jsx";
import BotonBackHistory from "../../../components/BotonBackHistory.astro";
import ModalLector from "./componentes/ModalLector.astro";
const { uidEvento } = Astro.params;
const fetching = await fetch(`http://localhost:4321/api/${uidEvento}`);
const data = await fetching.json();
const evento = data.files;
---

<LayoutLector title="RecepcionQR">
  <MainDashboard>
    <div
      class="md:w-10/12 rounded flex items-center bg-white px-1 py-2 justify-between gap-5"
    >
      <div class="relative">
        <BotonBackHistory clase="-top-5" />
      </div>
      <h2
        class="text-3xl font-thin text-transparent bg-clip-text bg-gradient-to-r to-yellow-300 from-amber-700 drop-shadow-[1px_1px_.5px_#00000050]"
      >
        {evento?.nombre}
      </h2>
      <div class="text-gray-600 mr-5">
        <button id="btnLector" class="fill-white">
          <svg
            viewBox="0 0 24 24"
            class="w-10 h-10 stroke-paleta1-gray"
            xmlns="http://www.w3.org/2000/svg"
            ><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g
              id="SVGRepo_tracerCarrier"
              stroke-linecap="round"
              stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier">
              <path
                d="M6.5 6.5H6.51M17.5 6.5H17.51M6.5 17.5H6.51M13 13H13.01M17.5 17.5H17.51M17 21H21V17M14 16.5V21M21 14H16.5M15.6 10H19.4C19.9601 10 20.2401 10 20.454 9.89101C20.6422 9.79513 20.7951 9.64215 20.891 9.45399C21 9.24008 21 8.96005 21 8.4V4.6C21 4.03995 21 3.75992 20.891 3.54601C20.7951 3.35785 20.6422 3.20487 20.454 3.10899C20.2401 3 19.9601 3 19.4 3H15.6C15.0399 3 14.7599 3 14.546 3.10899C14.3578 3.20487 14.2049 3.35785 14.109 3.54601C14 3.75992 14 4.03995 14 4.6V8.4C14 8.96005 14 9.24008 14.109 9.45399C14.2049 9.64215 14.3578 9.79513 14.546 9.89101C14.7599 10 15.0399 10 15.6 10ZM4.6 10H8.4C8.96005 10 9.24008 10 9.45399 9.89101C9.64215 9.79513 9.79513 9.64215 9.89101 9.45399C10 9.24008 10 8.96005 10 8.4V4.6C10 4.03995 10 3.75992 9.89101 3.54601C9.79513 3.35785 9.64215 3.20487 9.45399 3.10899C9.24008 3 8.96005 3 8.4 3H4.6C4.03995 3 3.75992 3 3.54601 3.10899C3.35785 3.20487 3.20487 3.35785 3.10899 3.54601C3 3.75992 3 4.03995 3 4.6V8.4C3 8.96005 3 9.24008 3.10899 9.45399C3.20487 9.64215 3.35785 9.79513 3.54601 9.89101C3.75992 10 4.03995 10 4.6 10ZM4.6 21H8.4C8.96005 21 9.24008 21 9.45399 20.891C9.64215 20.7951 9.79513 20.6422 9.89101 20.454C10 20.2401 10 19.9601 10 19.4V15.6C10 15.0399 10 14.7599 9.89101 14.546C9.79513 14.3578 9.64215 14.2049 9.45399 14.109C9.24008 14 8.96005 14 8.4 14H4.6C4.03995 14 3.75992 14 3.54601 14.109C3.35785 14.2049 3.20487 14.3578 3.10899 14.546C3 14.7599 3 15.0399 3 15.6V19.4C3 19.9601 3 20.2401 3.10899 20.454C3.20487 20.6422 3.35785 20.7951 3.54601 20.891C3.75992 21 4.03995 21 4.6 21Z"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </g></svg
          >
        </button>
      </div>
    </div>
    <Listado uidEvento={uidEvento} client:load />
  </MainDashboard>
  <ModalLector uidEvento={uidEvento} />
</LayoutLector>

<!-- <script define:vars={{ uidEvento }}>
  // Declara 'code' fuera de la función del evento
  let token = "";
  console.log("este es el uidEvento ->", uidEvento);
  window.addEventListener("keydown", async function (event) {
    // Asegúrate de que el evento no sea una tecla especial (por ejemplo, shift, ctrl, alt, etc.)
    if (event.key.length === 1) {
      // Agrega la tecla presionada al valor de entrada
      token += event.key;
    }

    // Si se presiona la tecla Enter, asume que el escaneo del código de barras ha terminado
    if (event.key === "Enter") {
      try {
        const res = await fetch("http://localhost:4321/api/verify", {
          headers: {
            Authorization: "Bearer " + token + " evento " + uidEvento,
          },
        });

        if (!res.ok) {
          throw new Error(`HTTP error! status: ${res.status}`);
        }

        const data = await res.json();
        console.log(data);
        const { evento, video } = data.decodificacion;
        const isOk = data.status == 200 || data.status == 205;

        if (isOk) {
          modalLector.classList.remove("modal");
        }
        if (data.status == 404 || data.status == 500) {
          qrEquivocado.style.visibility = "visible";
          const mensajeError = document.getElementById("mensajeError");
          mensajeError.textContent = data.message;
        }
      } catch (error) {
        console.error(error);
      }

      // Limpia el valor de 'code' para el próximo escaneo
      code = "";
    }
  });
</script> -->

<style>
  .card-transition {
    opacity: 0;
    transform: translateY(-20px);
    animation: cardTransition 0.5s forwards;
  }

  @keyframes cardTransition {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
<script>
  const btnLector = document.getElementById("btnLector");
  const modal = document.getElementById("modalLector");
  btnLector.addEventListener("click", () => {
    modal.classList.add("modal");
  });
</script>
