---
import SidebarCanvas from "./componentes/SidebarCanvas.astro";
const { uid } = Astro.params;

const fetching = await fetch("http://localhost:4321/api/data");
const dataCredenciales = await fetching.json();
const credenciales =await JSON.stringify(dataCredenciales.credenciales.filter((credencial) => {
  if (!uid) {
    return credencial;
  }
  return credencial.evento == uid;
}))

---

<div class="flex items-center justify-center flex-col w-full">
  <div
    class="min-h-[85vh] w-full bg-paleta1-gray/50 justify-center flex flex-col items-center p-5 rounded-lg shadow-lg relative"
  >
  <astro-greet data-credenciales={credenciales}></astro-greet>
    <SidebarCanvas />
    <div
      id="contenedorCanva"
      class="flex items-center justify-center w-full h-full top-0 left-0"
    >
      <canvas id="canvas" class="w- border shadow-[5px_5px_5px_1px_#c0c0c0]"
      ></canvas>
    </div>
  </div>
</div>

<script >

class AstroGreet extends HTMLElement {
  constructor() {
    super();
    // Lee el mensaje del atributo data.
    this.message = this.dataset.credenciales;
    
  }

}

customElements.define('astro-greet', AstroGreet);
const astroGreet = document.querySelector('astro-greet');
const credenciales= JSON.parse(astroGreet.dataset.credenciales)
  // Importa la biblioteca Fabric.js
  import { fabric } from "fabric";
  const btnImg = document.getElementById("cargaImg");
  const btnCargaQR = document.getElementById("cargaQR");
  const contenedor = document.getElementById("contenedorCanva");
  const btnQR = document.getElementById("btnQR");
  const btnAddText = document.getElementById("addText");
  const btnDescarga = document.getElementById("descargaImg");
  const btnGenerateQRS = document.getElementById("generateQRS");
  let coordMarcos = {
    left: 0,
    top: 0,
    width: 0,
    height: 0,
    angulo: 0,
  };
  // Crea un nuevo objeto fabric.Canvas
  const canvas = new fabric.Canvas("canvas");
  contenedor.style.background = "transparent";
  let anchoContenedor = 660;
  let altoContenedor = 520;

  // Establece el ancho y la altura del lienzo
  canvas.setWidth(anchoContenedor);
  canvas.setHeight(altoContenedor);

  //   carga tu imagen en el canva
  btnImg.addEventListener("change", (e) => {
    const file = e.target.files[0];
    const url = URL.createObjectURL(file);

    fabric.Image.fromURL(url, function (img) {
      // Ajusta la imagen al ancho y la altura del lienzo
      img.set({
        left: coordMarcos.left,
        top: coordMarcos.top,
      });
      // Obtiene las dimensiones de la imagen
      const anchoImg = img.getScaledWidth();
      const altoImg = img.getScaledHeight();

      canvas.setWidth(anchoImg);
      canvas.setHeight(altoImg);

      // Centra la imagen en el lienzo
      canvas.centerObject(img);

      // Añade la imagen al lienzo
      canvas.add(img);
    });
  });

  //   descarga iamgen
  btnDescarga.addEventListener("click", () => {
    // Obtiene el objeto activo (la imagen que has añadido)

    // Si hay un objeto activo, descarga solo esa parte del lienzo
    var dataURL = canvas.toDataURL({
      format: "png",
      quality: 1,
    });

    const a = document.createElement("a");
    a.download = "RecepcionQr - RamaCode";
    a.href = dataURL;
    a.click();
  });
  // agregarText
  btnAddText.addEventListener("click", () => {
    var texto = new fabric.Text("Hola mundo", { left: 10, top: 10 });
    canvas.add(texto);
    // Activa el modo de edición
    texto.enterEditing();
  });

  // Actualiza el lienzo
  canvas.renderAll();
  // mascar el cuadro
  btnCargaQR.addEventListener("click", (e) => {
    const marco = new fabric.Rect({
      width: 200,
      height: 200,
      name: "marcoQR",
      fill: "transparent",
      stroke: "gray",
      strokeWidth: 2,
      borderRadius: "25%",
    });

    // Añade la imagen al lienzo
    canvas.add(marco);
  });

  canvas.on("object:moving", function (e) {
    if (e.target.name == "marcoQR") {
      var objetoActivo = e.target;

      coordMarcos.left = objetoActivo.left;
      coordMarcos.top = objetoActivo.top;
      (coordMarcos.width = objetoActivo.getScaledWidth()),
        (coordMarcos.height = objetoActivo.getScaledHeight());
      coordMarcos.angulo = objetoActivo.angle;
    }
  });

  canvas.on("object:scaling", (e) => {
    if (e.target.name == "marcoQR") {
      var objetoActivo = e.target;

      coordMarcos.left = objetoActivo.left;
      coordMarcos.top = objetoActivo.top;
      (coordMarcos.width = objetoActivo.getScaledWidth()),
        (coordMarcos.height = objetoActivo.getScaledHeight()),
        (coordMarcos.angulo = objetoActivo.angle);
    }
  });

  canvas.on("object:rotating", (e) => {
    if (e.target.name == "marcoQR") {
      var objetoActivo = e.target;
      coordMarcos.left = objetoActivo.left;
      coordMarcos.top = objetoActivo.top;
      (coordMarcos.width = objetoActivo.getScaledWidth()),
        (coordMarcos.height = objetoActivo.getScaledHeight()),
        (coordMarcos.angulo = objetoActivo.angle);
    }
  });

  // cargar imagenQR
  btnQR.addEventListener("change", (e) => {
    // Encuentra el marco en el lienzo por su nombre
    const file = e.target.files[0];
    const url = URL.createObjectURL(file);
    // Encuentra el marco en el lienzo por su nombre
    // var miMarco = canvas.getObjects().find(obj => obj.name === 'marcoQR');
    fabric.Image.fromURL(url, function (img) {
      // Ajusta la imagen al ancho y la altura del marco
      img.scaleToWidth(coordMarcos.width);
      img.scaleToHeight(coordMarcos.height);

      // Coloca la imagen en la posición del marco
      img.set({
        angle: coordMarcos.angulo,
        left: coordMarcos.left,
        top: coordMarcos.top,
      });
      // Añade la imagen al lienzo
      canvas.add(img);
      // Actualiza el lienzo
      canvas.renderAll();
    });
  });

  btnGenerateQRS.addEventListener("click", () => {
  credenciales.forEach((credencial) => {
    fabric.Image.fromURL(credencial.QRCode, function (img) {
      // Ajusta la imagen al ancho y la altura del marco
      img.scaleToWidth(coordMarcos.width);
      img.scaleToHeight(coordMarcos.height);

      // Coloca la imagen en la posición del marco
      img.set({
        angle: coordMarcos.angulo,
        left: coordMarcos.left,
        top: coordMarcos.top,
      });

      // Añade la imagen al lienzo
      canvas.add(img);

      // Actualiza el lienzo
      canvas.renderAll();

      // Genera la URL de datos y descarga la imagen
      const downloadQR = () => {
        var dataURL = canvas.toDataURL({
          format: "png",
          quality: 1,
        });

        const a = document.createElement("a");
        a.download = "RecepcionQr - RamaCode";
        a.href = dataURL;
        a.click();
      };

      downloadQR();
    });
  });
});

</script>
